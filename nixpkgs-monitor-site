#!/usr/bin/env ruby

require 'sinatra'
require 'haml'
require 'sequel'
require 'distro-package'
require 'package-updater'
require 'cgi'

db_path = './db.sqlite'
DB = Sequel.sqlite(db_path)
cache = {}

helpers do

  def maintainers
    @maintainers ||= DB[:nix_maintainers].select(:maintainer).distinct.order(:maintainer).map(:maintainer).
        map{ |m| m.gsub(/<.*>/,"").strip }
  end

  def coverage
    @coverage ||= DB[:estimated_coverage].all.
        each_with_object({}){ |c, coverage| coverage[c[:pkg_attr]] = c[:coverage] }
  end

  def coverage_stats
    @coverage_stats ||= coverage.values.
        each_with_object(Hash.new(0)){ |c, cstat| cstat[c] += 1 }
  end

  def maintainer_stats
    @maintainer_stats ||= DistroPackage::Nix.packages.
        each_with_object(Hash.new(0)){ |pkg, mstat| mstat[pkg.maintainers.count] += 1 }
  end

  def outdated
    @outdated ||= PackageUpdater::Updaters.each.
        with_object(Hash.new{|h,k| h[k] = Hash.new{|h,k| h[k] = Array.new } }) do |updater, data|
          DB[updater.friendly_name].all.each do |row|
            data[row[:pkg_attr]][row[:version]] << updater.friendly_name.to_s
          end
        end
  end
  
  def is_major_update?(pkg, new_ver)
    v_t = PackageUpdater::Updater.tokenize_version(pkg.version)
    nv_t = PackageUpdater::Updater.tokenize_version(new_ver)
    return (
      not(v_t) or not(nv_t) or (v_t[0] != nv_t[0]) or
      (v_t[2]>=0 and (v_t[1] != nv_t[1]))
    )
  end

  def vulnerable
    unless @vulnerable
      @vulnerable = Hash.new{|h,k| h[k] = Hash.new}
      DB[:cve_match].all.each do |match|
        cve_product = "#{match[:product]}:#{match[:version]}"
        products = @vulnerable[match[:pkg_attr]]
        products[cve_product] = Set.new unless products[cve_product]
        products[cve_product] << match[:CVE]
      end
    end
    return @vulnerable
  end

  def refresh
    @vulnerable = nil
    @outdated = nil
    @maintainer_stats = nil
    @coverage_stats = nil
    @coverage = nil
    @maintainers = nil
    DistroPackage::Nix.refresh
    cache = {}

    vulnerable
    outdated
    maintainer_stats
    coverage_stats
    coverage
    maintainers
  end


  def filter_packages(filter)

    have_patches = ( filter[:haspatch] ? Set.new( DB[:patches].select(:pkg_attr).distinct.map(:pkg_attr) ) : nil )

    Set.new( DistroPackage::Nix.by_internal_name.select { |pkg, nixpkg|
      # maintainer count
      (not filter[:mc] or filter[:mc] == "" or filter[:mc].to_i == nixpkg.maintainers.count) and
      # coverage
      (not filter[:c] or filter[:c] == "" or filter[:c].to_i == coverage[pkg]) and
      #vulnerable
      (not filter[:vulnerable] or vulnerable.has_key?(pkg)) and
      # has a patch
      (not filter[:haspatch] or have_patches.include?(pkg) ) and
      # outdated which has a minor update
      (not filter[:outdated_minor] or (outdated.has_key?(pkg) and outdated[pkg].keys.find{|v| not is_major_update?(nixpkg, v)}) ) and
      # outdated which has a major update
      (not filter[:outdated_major] or (outdated.has_key?(pkg) and outdated[pkg].keys.find{|v| is_major_update?(nixpkg, v)}) ) and
      #outdated
      (not filter[:outdated] or outdated.has_key?(pkg)) and
      # has maintainer
      (not filter[:m] or filter[:m] == "" or (nixpkg.maintainers.index{ |m| m.downcase.include? filter[:m].downcase }))
      # to be continued
    }.keys )
  end


  def buildlog_lint(log)
    package_names = [ "gobject-introspection",

                      # documentation
                      "gtkdoc-check", "gtkdoc-rebase", "gtkdoc-mkpdf",
                      "gtk-doc documentation", "bison", "byacc", "flex", "lex", "pkg-config",
                      "doxygen", "msgfmt", "gmsgfmt", "xgettext", "msgmerge", "gnome-doc-utils",
                      "documentation", "manpages", "txt2html", "rst2html", "xmlto", "asciidoc",

                      # archives
                      "lzma", "zlib", "bzlib",

                      # TODO: something for gif, jpeg etc
                      ]
    lint = log.lines.select do |line|
      linedc = line.downcase
      package_names.find{ |pn| linedc =~ /checking .*#{pn}.*\.\.\..*(no|:)/ or linedc =~ /could not find .*#{pn}/ } or
      linedc.include? 'not installed' or # perl prequisites
      linedc =~ /skipped.* require/ or # perl test dependencies
      linedc =~ /skipped.* no.* available/ or # perl test dependencies
      linedc.=~ /subroutine .* redefined at/ or# perl warning
      linedc =~ /prerequisite .* not found/ or # perl warning
      linedc.include? "module not found" or # perl warning
      linedc =~ /failed.*test/ or # perl test failure
      linedc =~ /skipped:.*only with/ # perl warning
    end

    return lint
  end


  def render_checked(value)
    (value ? "checked" : "")
  end

  def render_selected(value)
    (value ? "selected" : "")
  end

  def render_filter(params)
    %{
      <form method=get>
        <div class=filteritem>
          Maintainers: <select name=mc>
            <option></option>#{
              maintainer_stats.keys.
                  map{ |k| "<option #{ render_selected(params[:mc] == k.to_s) }>#{k}</option>" }.
                  join
            }
          </select><br>
          Coverage: <select name=c>
            <option></option>#{
              coverage_stats.keys.
                  map{|k| "<option #{ render_selected(params[:c] == k.to_s) }>#{k}</option>"}.
                  join
            }
          </select>
        </div>
        <div class=filteritem style="text-align: left">
          <input type=checkbox name=vulnerable #{ render_checked(params[:vulnerable]) }>Vulnerable
          <input type=checkbox name=haspatch #{ render_checked(params[:haspatch]) }>With patch<br>
          <input type=checkbox name=outdated #{ render_checked(params[:outdated]) }>Outdated
          <input type=checkbox name=outdated_minor #{ render_checked(params[:outdated_minor]) }>Minor
          <input type=checkbox name=outdated_major #{ render_checked(params[:outdated_major]) }>Major
        </div>
        <div class=filteritem>
          Maintainer: <input type=text name=m value="#{params[:m]}"><br>
          <input type=submit value="Apply Filter">
        </div>
      </form>
    }
  end

  def render_versions(pkg, versions)
    versions.map do |version, updaters|
      patch_record = DB[:patches][:pkg_attr => pkg, :version => version]
      build_record = (patch_record ? DB[:builds][:outpath => patch_record[:outpath]] : nil)
      patch_label = build_record ? (build_record[:status] == "ok" ? "label-success" : "label-danger" ) : "label-primary"

      if patch_record
        "<span title=\"#{updaters.join(', ')}\"><a href=/patch?p=#{pkg}&v=#{version} class=\"label #{patch_label}\">#{version}</a></span>"
      else
        "<span title=\"#{updaters.join(', ')}\" class=\"label label-default\">#{version}</span>"
      end
    end.
    join(' ')
  end

  def render_cve(cve)
    %{<a href="http://web.nvd.nist.gov/view/vuln/detail?vulnId=#{cve.upcase}" class=cve>#{cve.upcase}</a>}
  end

end


get '/' do
  cache[:coverage_report] ||= coverage_stats.
      sort_by{ |cnum, ccnt| cnum }.
      map{ |c, cs| "<tr><td>#{c}</td><td><a href=/coverage?c=#{c}>#{cs}</a></td></tr>" }.
      join

  cache[:maintainer_report] ||= maintainer_stats.
      sort_by{ |mnum, pcnt| mnum }.
      map{ |mc, ms| "<tr><td>#{mc}</td><td><a href=/coverage?mc=#{mc}>#{ms}</a></td></tr>" }.
      join

  cache[:needsattention_report] ||= %{
      <tr><th>Packages</th><th>#</th></tr>
      <tr><td>Potentially vulnerable</td><td><a href=/vulnerable>#{vulnerable.count}</a></td></tr>
      <tr><td>Unmaintained not covered</td><td><a href=/coverage?mc=0&c=0>#{
        filter_packages({:c => 0, :mc => 0}).count
      }</a></td></tr>
      <tr><td>Outdated unmaintained</td><td><a href=/outdated?mc=0>#{
        filter_packages({:mc =>0, :outdated => true}).count
      }</a></td></tr>
      <tr><td>Outdated</td><td><a href=/outdated>#{outdated.count}</a></td></tr>
  }

  patches = DB[:patches].left_join(:builds, :outpath => :outpath)
  patch_report = %{
      <tr><td>Built</td><td>#{patches.where(:status => "ok").count}</td></tr>
      <tr><td>Failed</td><td>#{patches.where(:status => "failed").count}</td></tr>
      <tr><td>Queued</td><td>#{patches.where(:status => nil).count}</td></tr>
      <tr><td>Total</td><td><a href=/outdated?haspatch=on>#{DB[:patches].count}</a></td></tr>
  }

  cache[:permaintainer_report] ||= maintainers.
      map{ |maintainer| %{
          <tr>
          <td>#{maintainer}</td>
          <td>#{filter_packages({ :m => maintainer }).count}</td>
          <td><a href=/outdated?m=#{CGI::escape(maintainer)}>#{filter_packages({ :m => maintainer, :outdated => true }).count}</a></td>
          <td><a href=/coverage?m=#{CGI::escape(maintainer)}&c=0>#{filter_packages({ :m => maintainer, :c => 0 }).count}</a></td>
          <td><a href=/vulnerable?m=#{CGI::escape(maintainer)}>#{filter_packages({ :m => maintainer, :vulnerable => true }).count}</a></td>
          </tr>
      } }.
      join

  haml :dashboard, :locals => {
    :coverage_report => cache[:coverage_report],
    :maintainer_report => cache[:maintainer_report],
    :needsattention_report => cache[:needsattention_report],
    :patch_report => patch_report,
    :permaintainer_report => cache[:permaintainer_report]
  }
end


get '/coverage' do
  filtered = filter_packages(params)
  report = coverage.
      select{ |pkg, c| filtered.include? pkg }.
      sort_by{ |pkg, c| c }.
      map{ |pkg, c| %{
        <tr><td><a href="/pd?p=#{pkg}" class=pkglink data-target=#{pkg}>#{pkg}</a></td><td>#{c}</td>
        <td>#{DistroPackage::Nix.by_internal_name[pkg].maintainers.count}</td></tr>
        <tr><td colspan=3 id=#{pkg}></td>
      } }.
      join

  haml :coverage, :locals => { :coverage_report => report, :filter => render_filter(params) }
end


get '/outdated' do
  filtered = filter_packages(params)
  report = outdated.
      select{ |pkg, v| filtered.include? pkg }.
      sort_by{ |pkg, v| pkg }.
      map do |pkg, v|
        nixpkg = DistroPackage::Nix.by_internal_name[pkg]
        %{
            <tr><td><a href="/pd?p=#{pkg}" class=pkglink data-target=#{pkg}>#{pkg}</a>#{
              vulnerable.has_key?(pkg) ?
                "<span class=vuln title=\"Matches #{ vulnerable[pkg].keys.join(', ')}\">(V)</span>" : ""
            }
            </td>
            <td>#{nixpkg.version}</td>
            <td>#{
                render_versions(pkg, v.select { |version, updaters| not is_major_update?(nixpkg, version) })
            }</td><td>#{
                render_versions(pkg, v.select { |version, updaters| is_major_update?(nixpkg, version) })
            }</td>
            <tr><td colspan=4 id=#{pkg}></td></tr>
        }
      end.
      join

    haml :outdated, :locals => { :outdated_report => report, :filter => render_filter(params.merge({:outdated => true})) }
end


get '/patch' do
  patch_record = DB[:patches][:pkg_attr => params[:p], :version => params[:v]]
  halt(404, 'no matching patch found') unless patch_record
  content_type 'text/plain', :charset => 'utf-8'
  %{
From: Nixpkgs Monitor <none@none>
Subject: #{params[:p]}: update from #{DistroPackage::Nix.by_internal_name[params[:p]].version} to #{params[:v]}#{
  vulnerable.has_key?(params[:p]) ? ", potentially fixes #{vulnerable[params[:p]].values.map{|s| s.to_a}.flatten.join(', ')}": ""
}

#{patch_record[:patch]}
  }
end


get '/vulnerable' do
  filtered = filter_packages(params)
  report = vulnerable.
      select{ |pkg, v| filtered.include? pkg }.
      sort_by{ |pkg, v| pkg }.
      map do |pkg, candidates|
        candidates.map{ |prod, cves| %{
            <tr><td><a href="/pd?p=#{pkg}" class=pkglink data-target=#{pkg}>#{pkg}:#{DistroPackage::Nix.by_internal_name[pkg].version}</a></td>
            <td>#{prod}</td>
            <td>#{cves.to_a[0..(cves.size>3 ? 1 : 2)].map{|cve| render_cve(cve)}.join(', ')}
                #{cves.size>3 ? "... #{cves.size} total" : ""}</td></tr>
            <tr><td colspan=3 id=#{pkg}></td>
        } }.
        join
      end.
      join

  haml :vulnerable, :locals => { :vulnerable_report => report, :filter => render_filter(params.merge({:vulnerable => true})) }
end


get '/pd' do
  halt "package not specified" unless params[:p]
  pkg = DistroPackage::Nix.by_internal_name[params[:p]]
  halt "package not found" unless pkg
  %{
    <link rel="stylesheet" href="/default.css" type="text/css" />
    <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css" type="text/css" />
    <h4>Information:</h4>
    <table class="table table-striped table-condensed">
      <tr><td>Package:</td><td>#{pkg.internal_name}</td>
      <tr><td>Name:</td><td>#{pkg.name}</td>
      <tr><td>Version:</td><td>#{pkg.version}</td>
      <tr><td>Source:</td><td>#{pkg.url}</td>
      <tr><td>Vulnerable:</td><td>#{vulnerable.has_key?(pkg.internal_name) ? "<span class=vuln>YES</span>" : "no"}</td>
    </table>
    #{ vulnerable.has_key?(pkg.internal_name) ?
      %{
        <table>
        <th><tr><td>Matches to</td><td>CVEs</td>
        #{
          vulnerable[pkg.internal_name].
              map do |prod, cves|
                %{
                  <tr>
                  <td>#{prod}</td>
                  <td>#{cves.to_a.
                          map{|cve| render_cve(cve) }.
                          join(', ')
                      }
                  </td>
                  </tr>
                }
              end.
              join
        }
        </table>
      } : ""
    }

    #{ outdated.has_key?(pkg.internal_name) ?
      %{
        <h4>Available updates:</h4>
        <table class="table table-striped table-condensed">
        <tr><th>Version</th><th>Reported by</th><th>Tarball</th><th>Patch</th><th>Log</th>
        #{
          outdated[params[:p]].map do |version, updaters|
            patch = DB[:patches][:pkg_attr => pkg.internal_name, :version => version]
            build = (patch ? DB[:builds][:outpath => patch[:outpath]] : nil)
            tarball = DB[:tarballs].join(:tarball_sha256,:tarball => :tarball)[:pkg_attr => pkg.internal_name, :version => version]
            url = (tarball and tarball[:sha256] != '404') ? tarball [:tarball] : ""
            %{<tr>
              <td>#{version}</td>
              <td>#{updaters.join ", "}</td>
              <td><a href="#{url}">#{url}</a></td>
              <td>#{ patch ? "<a href=/patch?p=#{pkg.internal_name}&v=#{version}>yes</a>" : "" }</td>
              <td>#{ build ? "<a href=/buildlog?outpath=#{CGI::escape(build[:outpath])}>#{build[:status]}</a>" : "" }</td>
              </tr>
            }
          end.
          join
        }
      } : ""
    }
    </table>
  }
end

get '/buildlog' do
  halt 404, "derivation not specified" unless 
  build = DB[:builds][:outpath => params[:outpath]]
  halt 404, "package not found" unless build
  content_type 'text/plain', :charset => 'utf-8'

  log = build[:log]
  lint = buildlog_lint(log)

  %{
#{ lint.empty? ? "" :
%{An INCOMPLETE list of issues:
#{lint.join}

}
}
#{log}
  }
end

get '/refresh' do
  refresh
  "Refresh Done"
end


get '/rawdb' do
  send_file 'db.sqlite'
end


get '/default.css' do
  content_type 'text/css', :charset => 'utf-8'
<<STYLE
div.dashitem, div.header {
    margin: 0.5em;
    background-color: white;

    border: 1px solid black;
    padding: 1em;
}
div.dashitem { float: left; }
div.dashitem th {
    border-bottom: dotted 1px;
}
div.links { float: right }
div.filteritem { float: left; text-align: right; padding: 0 1em }
span.vuln { color:red }
STYLE
end


get '/packagedetails.js' do
  content_type 'text/javascript', :charset => 'utf-8'
<<DETAILS
function showPackageDetails(obj) {
  var elem = document.getElementById(obj.dataset.target);
  elem.innerHTML = "querying...";
  var xmlhttp = new XMLHttpRequest();
  xmlhttp.onreadystatechange = function() {
    if (xmlhttp.readyState==4 && xmlhttp.status==200) {
      elem.innerHTML=xmlhttp.responseText;
    }
  }
  xmlhttp.open("GET","/pd?p=" + obj.dataset.target,true);
  xmlhttp.send();
  return true;
}

var list = document.getElementsByClassName('pkglink');
for (var i = 0; i < list.length; i++) {
  list[i].onclick = (function(obj) {
    return function() {
      return !showPackageDetails(obj);
    }
  })(list[i]);
}

DETAILS
end


__END__

@@dashboard

<link rel="stylesheet" href="/default.css" type="text/css" />
<link rel="stylesheet" href="http://hydra.nixos.org/static/bootstrap/css/bootstrap.min.css" type="text/css" />
<link rel="stylesheet" href="http://hydra.nixos.org/static/css/hydra.css" type="text/css" />
<link rel="stylesheet" href="http://hydra.nixos.org/static/bootstrap/css/bootstrap-responsive.min.css" type="text/css" />

.navbar.navbar-fixed-top
  .navbar-inner
    .container
      %a.brand(href="http://monitor.nixos.org") 
        <img src="http://hydra.nixos.org/logo", alt="Nix logo" class="logo"/> Nixpkgs monitor

      .nav-collapse.collapse
        %ul.nav.pull-right
          %li
            %a(href="http://github.com/phreedom/nixpkgs-monitor/blob/master/help.md") info
          %li
            %a(href="http://github.com/phreedom/nixpkgs-monitor") source

.skip-topbar

.container
  .container
    .dashitem#coverage
      %table.table.table-striped.table-condensed
        %tr
          %th Coverage
          %th Packages
        = coverage_report

    .dashitem#maintainers
      %table.table.table-striped.table-condensed
        %tr
          %th Maintainers
          %th Packages
        = maintainer_report

    .dashitem#needsattention
      %table.table.table-striped.table-condensed
        = needsattention_report

  .container
    .dashitem#patches
      %table.table.table-striped.table-condensed
        %tr
          %th Patches
          %th #

        = patch_report

  .container
    .dashitem#permaintainer
      %table.table.table-striped.table-condensed
        %tr
          %th Maintainer
          %th Packages
          %th Outdated
          %th Not covered
          %th Vulnerable
        = permaintainer_report


@@coverage

<link rel="stylesheet" href="/default.css" type="text/css" />
<link rel="stylesheet" href="http://hydra.nixos.org/static/bootstrap/css/bootstrap.min.css" type="text/css" />
<link rel="stylesheet" href="http://hydra.nixos.org/static/css/hydra.css" type="text/css" />
<link rel="stylesheet" href="http://hydra.nixos.org/static/bootstrap/css/bootstrap-responsive.min.css" type="text/css" />

.navbar.navbar-fixed-top
  .navbar-inner
    .container
      %a.brand(href="http://monitor.nixos.org") 
        <img src="http://hydra.nixos.org/logo", alt="Nix logo" class="logo"/> Nixpkgs monitor

      .nav-collapse.collapse
        %ul.nav.pull-right
          %li
            %a(href="http://github.com/phreedom/nixpkgs-monitor/blob/master/help.md") info
          %li
            %a(href="http://github.com/phreedom/nixpkgs-monitor") source

.skip-topbar

.container
  .dashitem
    = filter

  .dashitem
    %table.table.table-striped.table-condensed
      %tr
        %th Attr Path
        %th Estimated Coverage
        %th Maintainers
      = coverage_report

  <script type="text/javascript" src="/packagedetails.js"></script>


@@outdated

<link rel="stylesheet" href="/default.css" type="text/css" />
<link rel="stylesheet" href="http://hydra.nixos.org/static/bootstrap/css/bootstrap.min.css" type="text/css" />
<link rel="stylesheet" href="http://hydra.nixos.org/static/css/hydra.css" type="text/css" />
<link rel="stylesheet" href="http://hydra.nixos.org/static/bootstrap/css/bootstrap-responsive.min.css" type="text/css" />

.navbar.navbar-fixed-top
  .navbar-inner
    .container
      %a.brand(href="http://monitor.nixos.org") 
        <img src="http://hydra.nixos.org/logo", alt="Nix logo" class="logo"/> Nixpkgs monitor

      .nav-collapse.collapse
        %ul.nav.pull-right
          %li
            %a(href="http://github.com/phreedom/nixpkgs-monitor/blob/master/help.md") info
          %li
            %a(href="http://github.com/phreedom/nixpkgs-monitor") source

.skip-topbar

.container
  .dashitem
    = filter

.container
  .dashitem
    %table.table.table-striped.table-condensed
      %tr
        %th Attr Path
        %th Current
        %th Minor Update(s)
        %th Major Update(s)
      = outdated_report

<script type="text/javascript" src="/packagedetails.js"></script>


@@vulnerable

<link rel="stylesheet" href="/default.css" type="text/css" />
<link rel="stylesheet" href="http://hydra.nixos.org/static/bootstrap/css/bootstrap.min.css" type="text/css" />
<link rel="stylesheet" href="http://hydra.nixos.org/static/css/hydra.css" type="text/css" />
<link rel="stylesheet" href="http://hydra.nixos.org/static/bootstrap/css/bootstrap-responsive.min.css" type="text/css" />

.navbar.navbar-fixed-top
  .navbar-inner
    .container
      %a.brand(href="http://monitor.nixos.org") 
        <img src="http://hydra.nixos.org/logo", alt="Nix logo" class="logo"/> Nixpkgs monitor

      .nav-collapse.collapse
        %ul.nav.pull-right
          %li
            %a(href="http://github.com/phreedom/nixpkgs-monitor/blob/master/help.md") info
          %li
            %a(href="http://github.com/phreedom/nixpkgs-monitor") source

.skip-topbar

.container

  .dashitem
    = filter

  .dashitem
    %table.table.table-striped.table-condensed
      %tr
        %th Attr Path/Version
        %th CVE Product
        %th CVE ID(s)
      = vulnerable_report

<script type="text/javascript" src="/packagedetails.js"></script>
